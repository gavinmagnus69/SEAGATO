// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/audio.proto

#include "proto/audio.pb.h"
#include "proto/audio.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* AudioServices_method_names[] = {
  "/AudioServices/sendAudio",
  "/AudioServices/sendTrackList",
  "/AudioServices/sendTrackStream",
  "/AudioServices/sendTracksTest",
};

std::unique_ptr< AudioServices::Stub> AudioServices::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AudioServices::Stub> stub(new AudioServices::Stub(channel, options));
  return stub;
}

AudioServices::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_sendAudio_(AudioServices_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendTrackList_(AudioServices_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendTrackStream_(AudioServices_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_sendTracksTest_(AudioServices_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status AudioServices::Stub::sendAudio(::grpc::ClientContext* context, const ::Request& request, ::Audio* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Request, ::Audio, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendAudio_, context, request, response);
}

void AudioServices::Stub::async::sendAudio(::grpc::ClientContext* context, const ::Request* request, ::Audio* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Request, ::Audio, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendAudio_, context, request, response, std::move(f));
}

void AudioServices::Stub::async::sendAudio(::grpc::ClientContext* context, const ::Request* request, ::Audio* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendAudio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Audio>* AudioServices::Stub::PrepareAsyncsendAudioRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Audio, ::Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendAudio_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Audio>* AudioServices::Stub::AsyncsendAudioRaw(::grpc::ClientContext* context, const ::Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendAudioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AudioServices::Stub::sendTrackList(::grpc::ClientContext* context, const ::Request_list& request, ::Tracks_list* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Request_list, ::Tracks_list, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendTrackList_, context, request, response);
}

void AudioServices::Stub::async::sendTrackList(::grpc::ClientContext* context, const ::Request_list* request, ::Tracks_list* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Request_list, ::Tracks_list, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendTrackList_, context, request, response, std::move(f));
}

void AudioServices::Stub::async::sendTrackList(::grpc::ClientContext* context, const ::Request_list* request, ::Tracks_list* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendTrackList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Tracks_list>* AudioServices::Stub::PrepareAsyncsendTrackListRaw(::grpc::ClientContext* context, const ::Request_list& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Tracks_list, ::Request_list, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendTrackList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Tracks_list>* AudioServices::Stub::AsyncsendTrackListRaw(::grpc::ClientContext* context, const ::Request_list& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendTrackListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::Track>* AudioServices::Stub::sendTrackStreamRaw(::grpc::ClientContext* context, const ::Tracks_list& request) {
  return ::grpc::internal::ClientReaderFactory< ::Track>::Create(channel_.get(), rpcmethod_sendTrackStream_, context, request);
}

void AudioServices::Stub::async::sendTrackStream(::grpc::ClientContext* context, const ::Tracks_list* request, ::grpc::ClientReadReactor< ::Track>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Track>::Create(stub_->channel_.get(), stub_->rpcmethod_sendTrackStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Track>* AudioServices::Stub::AsyncsendTrackStreamRaw(::grpc::ClientContext* context, const ::Tracks_list& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Track>::Create(channel_.get(), cq, rpcmethod_sendTrackStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Track>* AudioServices::Stub::PrepareAsyncsendTrackStreamRaw(::grpc::ClientContext* context, const ::Tracks_list& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Track>::Create(channel_.get(), cq, rpcmethod_sendTrackStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::Track>* AudioServices::Stub::sendTracksTestRaw(::grpc::ClientContext* context, const ::User& request) {
  return ::grpc::internal::ClientReaderFactory< ::Track>::Create(channel_.get(), rpcmethod_sendTracksTest_, context, request);
}

void AudioServices::Stub::async::sendTracksTest(::grpc::ClientContext* context, const ::User* request, ::grpc::ClientReadReactor< ::Track>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Track>::Create(stub_->channel_.get(), stub_->rpcmethod_sendTracksTest_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Track>* AudioServices::Stub::AsyncsendTracksTestRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Track>::Create(channel_.get(), cq, rpcmethod_sendTracksTest_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Track>* AudioServices::Stub::PrepareAsyncsendTracksTestRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Track>::Create(channel_.get(), cq, rpcmethod_sendTracksTest_, context, request, false, nullptr);
}

AudioServices::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioServices_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioServices::Service, ::Request, ::Audio, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioServices::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Request* req,
             ::Audio* resp) {
               return service->sendAudio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioServices_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioServices::Service, ::Request_list, ::Tracks_list, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AudioServices::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Request_list* req,
             ::Tracks_list* resp) {
               return service->sendTrackList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioServices_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AudioServices::Service, ::Tracks_list, ::Track>(
          [](AudioServices::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Tracks_list* req,
             ::grpc::ServerWriter<::Track>* writer) {
               return service->sendTrackStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioServices_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< AudioServices::Service, ::User, ::Track>(
          [](AudioServices::Service* service,
             ::grpc::ServerContext* ctx,
             const ::User* req,
             ::grpc::ServerWriter<::Track>* writer) {
               return service->sendTracksTest(ctx, req, writer);
             }, this)));
}

AudioServices::Service::~Service() {
}

::grpc::Status AudioServices::Service::sendAudio(::grpc::ServerContext* context, const ::Request* request, ::Audio* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioServices::Service::sendTrackList(::grpc::ServerContext* context, const ::Request_list* request, ::Tracks_list* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioServices::Service::sendTrackStream(::grpc::ServerContext* context, const ::Tracks_list* request, ::grpc::ServerWriter< ::Track>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioServices::Service::sendTracksTest(::grpc::ServerContext* context, const ::User* request, ::grpc::ServerWriter< ::Track>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


