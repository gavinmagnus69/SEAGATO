# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import audio_pb2 as audio__pb2


class AudioServicesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sendAudio = channel.unary_unary(
                '/AudioServices/sendAudio',
                request_serializer=audio__pb2.Request.SerializeToString,
                response_deserializer=audio__pb2.Audio.FromString,
                )
        self.sendTrackList = channel.unary_unary(
                '/AudioServices/sendTrackList',
                request_serializer=audio__pb2.Request_list.SerializeToString,
                response_deserializer=audio__pb2.Tracks_list.FromString,
                )
        self.sendTrackStream = channel.unary_stream(
                '/AudioServices/sendTrackStream',
                request_serializer=audio__pb2.Tracks_list.SerializeToString,
                response_deserializer=audio__pb2.Track.FromString,
                )
        self.sendTracksTest = channel.unary_stream(
                '/AudioServices/sendTracksTest',
                request_serializer=audio__pb2.User.SerializeToString,
                response_deserializer=audio__pb2.Track.FromString,
                )
        self.sendHello = channel.unary_unary(
                '/AudioServices/sendHello',
                request_serializer=audio__pb2.Hello.SerializeToString,
                response_deserializer=audio__pb2.Asnwer.FromString,
                )


class AudioServicesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def sendAudio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendTrackList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendTrackStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendTracksTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendHello(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AudioServicesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sendAudio': grpc.unary_unary_rpc_method_handler(
                    servicer.sendAudio,
                    request_deserializer=audio__pb2.Request.FromString,
                    response_serializer=audio__pb2.Audio.SerializeToString,
            ),
            'sendTrackList': grpc.unary_unary_rpc_method_handler(
                    servicer.sendTrackList,
                    request_deserializer=audio__pb2.Request_list.FromString,
                    response_serializer=audio__pb2.Tracks_list.SerializeToString,
            ),
            'sendTrackStream': grpc.unary_stream_rpc_method_handler(
                    servicer.sendTrackStream,
                    request_deserializer=audio__pb2.Tracks_list.FromString,
                    response_serializer=audio__pb2.Track.SerializeToString,
            ),
            'sendTracksTest': grpc.unary_stream_rpc_method_handler(
                    servicer.sendTracksTest,
                    request_deserializer=audio__pb2.User.FromString,
                    response_serializer=audio__pb2.Track.SerializeToString,
            ),
            'sendHello': grpc.unary_unary_rpc_method_handler(
                    servicer.sendHello,
                    request_deserializer=audio__pb2.Hello.FromString,
                    response_serializer=audio__pb2.Asnwer.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AudioServices', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AudioServices(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def sendAudio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AudioServices/sendAudio',
            audio__pb2.Request.SerializeToString,
            audio__pb2.Audio.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendTrackList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AudioServices/sendTrackList',
            audio__pb2.Request_list.SerializeToString,
            audio__pb2.Tracks_list.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendTrackStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AudioServices/sendTrackStream',
            audio__pb2.Tracks_list.SerializeToString,
            audio__pb2.Track.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendTracksTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AudioServices/sendTracksTest',
            audio__pb2.User.SerializeToString,
            audio__pb2.Track.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AudioServices/sendHello',
            audio__pb2.Hello.SerializeToString,
            audio__pb2.Asnwer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
